;; Analyzed by ClojureScript 1.7.170
{:use-macros {defui om.next}, :excludes #{}, :name will-receive-props-bug.app, :imports nil, :requires {dom om.dom, om.dom om.dom, gdom goog.dom, goog.dom goog.dom, om om.next, om.next om.next}, :uses nil, :defs {Root {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name will-receive-props-bug.app/Root, :variadic false, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, mutate {:name will-receive-props-bug.app/mutate, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 17, :column 1, :end-line 17, :end-column 17, :meta {:file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 17, :column 11, :end-line 17, :end-column 17}}, data {:name will-receive-props-bug.app/data, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 6, :column 1, :end-line 6, :end-column 10, :meta {:file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 6, :column 6, :end-line 6, :end-column 10}}, read {:name will-receive-props-bug.app/read, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 11, :column 1, :end-line 11, :end-column 15, :meta {:file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 11, :column 11, :end-line 11, :end-column 15}}, lookup {:protocol-inline nil, :meta {:file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 8, :column 7, :end-line 8, :end-column 13, :arglists (quote ([st key]))}, :name will-receive-props-bug.app/lookup, :variadic false, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :end-column 13, :method-params ([st key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st key]))}, init {:protocol-inline nil, :meta {:file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 57, :column 7, :end-line 57, :end-column 11, :arglists (quote ([]))}, :name will-receive-props-bug.app/init, :variadic false, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reconciler {:name will-receive-props-bug.app/reconciler, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 51, :column 1, :end-line 51, :end-column 16, :meta {:file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 51, :column 6, :end-line 51, :end-column 16}}, child-view {:name will-receive-props-bug.app/child-view, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 39, :column 1, :end-line 39, :end-column 16, :meta {:file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :line 39, :column 6, :end-line 39, :end-column 16}}, parser {:name will-receive-props-bug.app/parser, :source "parser", :file "<cljs repl>", :line 1, :column 1, :end-line 1, :end-column 12, :meta {:source "parser", :file "NO_SOURCE_FILE", :line 1, :column 6, :end-line 1, :end-column 12}}, Child {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name will-receive-props-bug.app/Child, :variadic false, :file "/Users/txus/Code/will-receive-props-bug/src/cljs/will_receive_props_bug/app.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}}, :require-macros {dom om.dom, om.dom om.dom, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{will-receive-props-bug.app :read :om.next/queries :config :default :app/current-user :ns :name :value :file :end-column :state :source :column :parser :keys :line :foo :indexer :end-line :action parser :arglists :hierarchy :doc :test change-foo :mutate will-receive-props-bug.app/parser}, :order [:foo :hierarchy :default :state :value change-foo :action :keys :app/current-user :config :indexer :om.next/queries :parser :read :mutate will-receive-props-bug.app/parser :ns :name :file :end-column :source :column :line :end-line :arglists :doc :test will-receive-props-bug.app parser]}, :doc nil}